// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CompilationServiceClient is the client API for CompilationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CompilationServiceClient interface {
	// Compilation api
	StartClient(ctx context.Context, in *StartClientRequest, opts ...grpc.CallOption) (*StartClientReply, error)
	StartCompilationSession(ctx context.Context, in *StartCompilationSessionRequest, opts ...grpc.CallOption) (*StartCompilationSessionReply, error)
	UploadFileStream(ctx context.Context, opts ...grpc.CallOption) (CompilationService_UploadFileStreamClient, error)
	RecvCompiledObjStream(ctx context.Context, in *OpenReceiveStreamRequest, opts ...grpc.CallOption) (CompilationService_RecvCompiledObjStreamClient, error)
	StopClient(ctx context.Context, in *StopClientRequest, opts ...grpc.CallOption) (*StopClientReply, error)
	// Service api
	Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusReply, error)
	DumpLogs(ctx context.Context, in *DumpLogsRequest, opts ...grpc.CallOption) (CompilationService_DumpLogsClient, error)
	DropAllCaches(ctx context.Context, in *DropAllCachesRequest, opts ...grpc.CallOption) (*DropAllCachesReply, error)
}

type compilationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCompilationServiceClient(cc grpc.ClientConnInterface) CompilationServiceClient {
	return &compilationServiceClient{cc}
}

func (c *compilationServiceClient) StartClient(ctx context.Context, in *StartClientRequest, opts ...grpc.CallOption) (*StartClientReply, error) {
	out := new(StartClientReply)
	err := c.cc.Invoke(ctx, "/nocc.CompilationService/StartClient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *compilationServiceClient) StartCompilationSession(ctx context.Context, in *StartCompilationSessionRequest, opts ...grpc.CallOption) (*StartCompilationSessionReply, error) {
	out := new(StartCompilationSessionReply)
	err := c.cc.Invoke(ctx, "/nocc.CompilationService/StartCompilationSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *compilationServiceClient) UploadFileStream(ctx context.Context, opts ...grpc.CallOption) (CompilationService_UploadFileStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &CompilationService_ServiceDesc.Streams[0], "/nocc.CompilationService/UploadFileStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &compilationServiceUploadFileStreamClient{stream}
	return x, nil
}

type CompilationService_UploadFileStreamClient interface {
	Send(*UploadFileChunkRequest) error
	Recv() (*UploadFileReply, error)
	grpc.ClientStream
}

type compilationServiceUploadFileStreamClient struct {
	grpc.ClientStream
}

func (x *compilationServiceUploadFileStreamClient) Send(m *UploadFileChunkRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *compilationServiceUploadFileStreamClient) Recv() (*UploadFileReply, error) {
	m := new(UploadFileReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *compilationServiceClient) RecvCompiledObjStream(ctx context.Context, in *OpenReceiveStreamRequest, opts ...grpc.CallOption) (CompilationService_RecvCompiledObjStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &CompilationService_ServiceDesc.Streams[1], "/nocc.CompilationService/RecvCompiledObjStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &compilationServiceRecvCompiledObjStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CompilationService_RecvCompiledObjStreamClient interface {
	Recv() (*RecvCompiledObjChunkReply, error)
	grpc.ClientStream
}

type compilationServiceRecvCompiledObjStreamClient struct {
	grpc.ClientStream
}

func (x *compilationServiceRecvCompiledObjStreamClient) Recv() (*RecvCompiledObjChunkReply, error) {
	m := new(RecvCompiledObjChunkReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *compilationServiceClient) StopClient(ctx context.Context, in *StopClientRequest, opts ...grpc.CallOption) (*StopClientReply, error) {
	out := new(StopClientReply)
	err := c.cc.Invoke(ctx, "/nocc.CompilationService/StopClient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *compilationServiceClient) Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusReply, error) {
	out := new(StatusReply)
	err := c.cc.Invoke(ctx, "/nocc.CompilationService/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *compilationServiceClient) DumpLogs(ctx context.Context, in *DumpLogsRequest, opts ...grpc.CallOption) (CompilationService_DumpLogsClient, error) {
	stream, err := c.cc.NewStream(ctx, &CompilationService_ServiceDesc.Streams[2], "/nocc.CompilationService/DumpLogs", opts...)
	if err != nil {
		return nil, err
	}
	x := &compilationServiceDumpLogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CompilationService_DumpLogsClient interface {
	Recv() (*DumpLogsReply, error)
	grpc.ClientStream
}

type compilationServiceDumpLogsClient struct {
	grpc.ClientStream
}

func (x *compilationServiceDumpLogsClient) Recv() (*DumpLogsReply, error) {
	m := new(DumpLogsReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *compilationServiceClient) DropAllCaches(ctx context.Context, in *DropAllCachesRequest, opts ...grpc.CallOption) (*DropAllCachesReply, error) {
	out := new(DropAllCachesReply)
	err := c.cc.Invoke(ctx, "/nocc.CompilationService/DropAllCaches", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CompilationServiceServer is the server API for CompilationService service.
// All implementations must embed UnimplementedCompilationServiceServer
// for forward compatibility
type CompilationServiceServer interface {
	// Compilation api
	StartClient(context.Context, *StartClientRequest) (*StartClientReply, error)
	StartCompilationSession(context.Context, *StartCompilationSessionRequest) (*StartCompilationSessionReply, error)
	UploadFileStream(CompilationService_UploadFileStreamServer) error
	RecvCompiledObjStream(*OpenReceiveStreamRequest, CompilationService_RecvCompiledObjStreamServer) error
	StopClient(context.Context, *StopClientRequest) (*StopClientReply, error)
	// Service api
	Status(context.Context, *StatusRequest) (*StatusReply, error)
	DumpLogs(*DumpLogsRequest, CompilationService_DumpLogsServer) error
	DropAllCaches(context.Context, *DropAllCachesRequest) (*DropAllCachesReply, error)
	mustEmbedUnimplementedCompilationServiceServer()
}

// UnimplementedCompilationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCompilationServiceServer struct {
}

func (UnimplementedCompilationServiceServer) StartClient(context.Context, *StartClientRequest) (*StartClientReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartClient not implemented")
}
func (UnimplementedCompilationServiceServer) StartCompilationSession(context.Context, *StartCompilationSessionRequest) (*StartCompilationSessionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartCompilationSession not implemented")
}
func (UnimplementedCompilationServiceServer) UploadFileStream(CompilationService_UploadFileStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadFileStream not implemented")
}
func (UnimplementedCompilationServiceServer) RecvCompiledObjStream(*OpenReceiveStreamRequest, CompilationService_RecvCompiledObjStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method RecvCompiledObjStream not implemented")
}
func (UnimplementedCompilationServiceServer) StopClient(context.Context, *StopClientRequest) (*StopClientReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopClient not implemented")
}
func (UnimplementedCompilationServiceServer) Status(context.Context, *StatusRequest) (*StatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (UnimplementedCompilationServiceServer) DumpLogs(*DumpLogsRequest, CompilationService_DumpLogsServer) error {
	return status.Errorf(codes.Unimplemented, "method DumpLogs not implemented")
}
func (UnimplementedCompilationServiceServer) DropAllCaches(context.Context, *DropAllCachesRequest) (*DropAllCachesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropAllCaches not implemented")
}
func (UnimplementedCompilationServiceServer) mustEmbedUnimplementedCompilationServiceServer() {}

// UnsafeCompilationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CompilationServiceServer will
// result in compilation errors.
type UnsafeCompilationServiceServer interface {
	mustEmbedUnimplementedCompilationServiceServer()
}

func RegisterCompilationServiceServer(s grpc.ServiceRegistrar, srv CompilationServiceServer) {
	s.RegisterService(&CompilationService_ServiceDesc, srv)
}

func _CompilationService_StartClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompilationServiceServer).StartClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nocc.CompilationService/StartClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompilationServiceServer).StartClient(ctx, req.(*StartClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompilationService_StartCompilationSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartCompilationSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompilationServiceServer).StartCompilationSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nocc.CompilationService/StartCompilationSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompilationServiceServer).StartCompilationSession(ctx, req.(*StartCompilationSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompilationService_UploadFileStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CompilationServiceServer).UploadFileStream(&compilationServiceUploadFileStreamServer{stream})
}

type CompilationService_UploadFileStreamServer interface {
	Send(*UploadFileReply) error
	Recv() (*UploadFileChunkRequest, error)
	grpc.ServerStream
}

type compilationServiceUploadFileStreamServer struct {
	grpc.ServerStream
}

func (x *compilationServiceUploadFileStreamServer) Send(m *UploadFileReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *compilationServiceUploadFileStreamServer) Recv() (*UploadFileChunkRequest, error) {
	m := new(UploadFileChunkRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _CompilationService_RecvCompiledObjStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(OpenReceiveStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CompilationServiceServer).RecvCompiledObjStream(m, &compilationServiceRecvCompiledObjStreamServer{stream})
}

type CompilationService_RecvCompiledObjStreamServer interface {
	Send(*RecvCompiledObjChunkReply) error
	grpc.ServerStream
}

type compilationServiceRecvCompiledObjStreamServer struct {
	grpc.ServerStream
}

func (x *compilationServiceRecvCompiledObjStreamServer) Send(m *RecvCompiledObjChunkReply) error {
	return x.ServerStream.SendMsg(m)
}

func _CompilationService_StopClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompilationServiceServer).StopClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nocc.CompilationService/StopClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompilationServiceServer).StopClient(ctx, req.(*StopClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompilationService_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompilationServiceServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nocc.CompilationService/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompilationServiceServer).Status(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompilationService_DumpLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DumpLogsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CompilationServiceServer).DumpLogs(m, &compilationServiceDumpLogsServer{stream})
}

type CompilationService_DumpLogsServer interface {
	Send(*DumpLogsReply) error
	grpc.ServerStream
}

type compilationServiceDumpLogsServer struct {
	grpc.ServerStream
}

func (x *compilationServiceDumpLogsServer) Send(m *DumpLogsReply) error {
	return x.ServerStream.SendMsg(m)
}

func _CompilationService_DropAllCaches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DropAllCachesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompilationServiceServer).DropAllCaches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nocc.CompilationService/DropAllCaches",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompilationServiceServer).DropAllCaches(ctx, req.(*DropAllCachesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CompilationService_ServiceDesc is the grpc.ServiceDesc for CompilationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CompilationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nocc.CompilationService",
	HandlerType: (*CompilationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartClient",
			Handler:    _CompilationService_StartClient_Handler,
		},
		{
			MethodName: "StartCompilationSession",
			Handler:    _CompilationService_StartCompilationSession_Handler,
		},
		{
			MethodName: "StopClient",
			Handler:    _CompilationService_StopClient_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _CompilationService_Status_Handler,
		},
		{
			MethodName: "DropAllCaches",
			Handler:    _CompilationService_DropAllCaches_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadFileStream",
			Handler:       _CompilationService_UploadFileStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "RecvCompiledObjStream",
			Handler:       _CompilationService_RecvCompiledObjStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DumpLogs",
			Handler:       _CompilationService_DumpLogs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pb/nocc-protobuf.proto",
}
